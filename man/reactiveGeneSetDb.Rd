% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reactiveGeneSetDb-module.R
\name{reactiveGeneSetDb}
\alias{reactiveGeneSetDb}
\alias{reactiveGeneSetDbUI}
\title{A UI for a GeneSetDb that enables users to select gene sets used for testing.}
\usage{
reactiveGeneSetDb(
  input,
  output,
  session,
  gdb,
  min.gs.size = 2L,
  max.gs.size = Inf,
  default_collections = NULL,
  ...
)

reactiveGeneSetDbUI(id, min = 2, max = 100L, ...)
}
\arguments{
\item{input, output, session}{shiny module bits}

\item{gdb}{A static or reactive GeneSetDb object}

\item{min.gs.size, max.gs.size}{the default minimum and maximum geneset size
set in the UI when `gdb` is first loaded or changes (when reactive)}

\item{default_collections}{a character vector of collections that are by
default selected for use}

\item{...}{pass through args}

\item{id}{shiny module namespace}

\item{min, max}{ranges for the min/max geneset slider}
}
\value{
A list of reactive elements wired to the input `gdb`:
\describe{
  \item{gdb}{a `reactive(gdb)`}
  \item{geneSets}{a `reacvtive(geneSets(gdb))`}
  \item{min.gs.size,max.gs.size}{
    reactives that indicate current selection of minimum and maximum gene set
    sizes to be used in `sparrow::conform(gdb, ...)`
  }
  \item{.state}{a `shiny::reactiveList` that contains the state of this module}
  \item{.ns}{the shiny namespace for this module}
}
}
\description{
This can be instantiated from a "static" or "reactive" GeneSetDb object.
It allows users to customize which genesets are active by:
}
\details{
1. Filtering out entire collections; and
2. Filtering genesets based on min and max (gene) size.
}
\section{Functions}{
\itemize{
\item \code{reactiveGeneSetDbUI}: the UI for the module
}}

\examples{
sres <- sparrow::exampleSparrowResult()
gdb <- sparrow::geneSetDb(sres)
app <- shiny::shinyApp(
  ui = shiny::shinyUI(shiny::fluidPage(
    exampleUISetup(),
    title = "Configure GeneSetDb",
    reactiveGeneSetDbUI("mod"))),
  server = function(input, output, session) {
    shiny::callModule(reactiveGeneSetDb, "mod", gdb)
  })
if (interactive()) {
  shiny::runApp(app)
}
}
